{"version":3,"sources":["DataTablex.min.js"],"names":["f","exports","module","define","$","window","this","pluginName","i","r","namespace"],"mappings":"UAAUA,GAAG,GAAoBC,iBAAVA,SAAoC,oBAAAC,OAAaA,OAAOD,QAAQD,SAAmBG,GAASA,mBAATA,QAAqBA,OAAYA,IAAAA,OAAUH,GAAAA,OAezII,EAAAA,oBAfiKC,OAiCrKC,OAAAA,oBAAAA,OAAAA,OAlBIF,oBAyPDC,KApPHE,KAYoBC,MAwOjBH,WAzPCD,MAAAA,WAKJG,OAYoBC,SACpBF,EAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,SAAAA,QAhCRG,IAAAA,GAuQWJ,EAAAA,OAzPCD,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,OAYEI,EAAAA,GARNE,GAAAA,IACAH,EAAAA,IAAAA,MAYoBC,uBA/B5BA,EAAA,KAAAC,MAuQWJ,EAAAA,KAzPCD,mBAYEI,EAAAA,IAAAA,EARNE,EAAAA,GACAH,CAAAA,QAAAA,IAYoBC,EAAAA,GAAAP,GAAAA,KAAIC,EACxBI,QAAAA,SAAAA,GAAAA,OAAAA,EAAAA,EAAAA,GAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,QAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,GAAAA,QAAAA,IAAAA,IAAAA,EAAAA,mBAAAA,SAAAA,QAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,IAAAA,OAAAA,EAbAC,CAaAD,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,gmIAbAC","file":"DataTablex.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DataTablex = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\n/**\r\n * DataTablex.js\r\n * @author Ozy Wu-Li - @ousikaa\r\n * @description Simple data table\r\n */\n\n// https://github.com/jquery-boilerplate/jquery-patterns/blob/master/patterns/jquery.basic.plugin-boilerplate.js\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n// the anonymous function protects the `$` alias from name collisions\n;(function ($, window, document, undefined) {\n    /**\r\n     * Plugin namespace\r\n     */\n    var namespace = {\n        pluginName: 'DataTablex'\n    };\n\n    /**\r\n     * Defaults\r\n     */\n    var defaults = {\n        data: null\n\n        /**\r\n         * Plugin Constructor\r\n         */\n    };namespace['pluginName'] = function (options) {\n        this.options = $.extend({}, defaults, options);\n        this.init();\n    };\n\n    /**\r\n     * Prototype\r\n     */\n    namespace['pluginName'].prototype = {\n        /**\r\n         * \r\n         */\n        init: function init() {\n            var _this = this;\n\n            if (this.options.title) {\n                this.addTableTitle();\n            }\n            this.buildTable(this.options.data);\n            if (this.options.source) {\n                this.addTableSource();\n            }\n            this.initSortClickEvent();\n\n            if (this.options.initialKey) {\n                $('.datatablex table a[data-tablex-key=\"' + this.options.initialKey + '\"]').addClass('is-sorting');\n                this.options.data.sort(function (a, b) {\n                    return b[_this.options.initialKey] - a[_this.options.initialKey];\n                });\n            }\n        },\n        clonedData: function clonedData() {\n            return this.options.data.slice(0);\n        },\n        sortedData: function sortedData(key, reverse) {\n            var clonedData = this.clonedData().sort(function (a, b) {\n                var aKey = isNaN(a[key]) ? 0 : a[key];\n                var bKey = isNaN(b[key]) ? 0 : b[key];\n                if (reverse) {\n                    return bKey - aKey;\n                } else {\n                    return aKey - bKey;\n                }\n            });\n\n            return clonedData;\n        },\n\n\n        /**\r\n         * \r\n         */\n        sorter: function sorter(key, reverse) {\n            var sortedData = this.sortedData(key, reverse);\n            this.buildTableBody(sortedData);\n        },\n\n\n        /**\r\n         * \r\n         */\n        buildTableHead: function buildTableHead(data) {\n            if (data) {\n                var dataTableHeaderRow = '';\n                var dataTableHeaderRowCells = '';\n\n                if (this.options.columns) {\n                    this.options.columns.forEach(function (key) {\n                        if (isNaN(data[0][key.name])) {\n                            dataTableHeaderRowCells += '\\n                                <td>' + key.name + '</td>\\n                            ';\n                        } else {\n                            dataTableHeaderRowCells += '\\n                                <td><a href=\"#\" class=\"\" data-tablex-key=\"' + key.name + '\">' + key.name + '</a></td>\\n                            ';\n                        }\n                    });\n                } else {\n                    for (var key in data[0]) {\n                        if (isNaN(data[0][key])) {\n                            dataTableHeaderRowCells += '\\n                                <td>' + key + '</td>\\n                            ';\n                        } else {\n                            dataTableHeaderRowCells += '\\n                                <td><a href=\"#\" class=\"\" data-tablex-key=\"' + key + '\">' + key + '</a></td>\\n                            ';\n                        }\n                    }\n                }\n\n                dataTableHeaderRow = '\\n                    <tr>\\n                        ' + dataTableHeaderRowCells + '\\n                    </tr>\\n                ';\n\n                $('.datatablex thead').append(dataTableHeaderRow);\n            } else {\n                console.log('no data');\n            }\n        },\n\n\n        /**\r\n         * \r\n         */\n        buildTableBody: function buildTableBody(data) {\n            var _this2 = this;\n\n            if (data) {\n                var dataTableBody = '';\n\n                data.forEach(function (item) {\n                    var dataTableRowCells = '';\n\n                    if (_this2.options.columns) {\n                        _this2.options.columns.forEach(function (key) {\n                            var itemKeyName = item[key.name];\n                            if (!isNaN(itemKeyName)) {\n                                itemKeyName = itemKeyName.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                            }\n\n                            dataTableRowCells += '\\n                                <td data-tablex-key=\"' + key.name + '\">' + itemKeyName + '</td>\\n                            ';\n                        });\n                    } else {\n                        for (var key in item) {\n                            var itemKeyName = item[key];\n                            if (!isNaN(itemKeyName)) {\n                                itemKeyName = itemKeyName.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                            }\n\n                            dataTableRowCells += '\\n                                <td data-tablex-key=\"' + key.name + '\">' + item[key] + '</td>\\n                            ';\n                        }\n                    }\n\n                    var dataTableRow = '\\n                        <tr>\\n                            ' + dataTableRowCells + '\\n                        </tr>\\n                    ';\n\n                    dataTableBody += dataTableRow;\n                });\n\n                $('.datatablex tbody').empty();\n                $('.datatablex tbody').append(dataTableBody);\n            } else {\n                console.log('no data');\n            }\n        },\n\n\n        /**\r\n         * \r\n         */\n        buildTableContainer: function buildTableContainer() {\n            var dataTableContainer = '\\n                <div class=\"datatablex-container\">\\n                    <table>\\n                        <thead>\\n                        </thead>\\n                        <tbody>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            ';\n\n            $('.datatablex').append(dataTableContainer);\n        },\n\n\n        /**\r\n         * Add Table Title\r\n         */\n        addTableTitle: function addTableTitle() {\n            $('.datatablex').append('<h2 class=\"datatablex-title\">' + this.options.title + '</h2>');\n        },\n\n\n        /**\r\n         * Add Table Source\r\n         */\n        addTableSource: function addTableSource() {\n            $('.datatablex').append('<div class=\"datatablex-source\">Source(s): ' + this.options.source + '</div>');\n        },\n\n\n        /**\r\n         * \r\n         */\n        buildTable: function buildTable(data) {\n            var dataCopy = data.slice(0);\n\n            this.buildTableContainer();\n            this.buildTableHead(dataCopy);\n            this.buildTableBody(dataCopy);\n        },\n\n\n        /**\r\n         * \r\n         */\n        initSortClickEvent: function initSortClickEvent() {\n            $('body').on('click.sort', '.datatablex table a', this.sortClickEventHandler.bind(this));\n        },\n\n\n        /**\r\n         * \r\n         */\n        sortClickEventHandler: function sortClickEventHandler(event) {\n            event.preventDefault();\n\n            var key = $(event.currentTarget).attr('data-tablex-key');\n\n            if ($(event.currentTarget).hasClass('is-reversed')) {\n                this.sorter(key, false);\n            } else {\n                this.sorter(key, true);\n            }\n\n            if (!$(event.currentTarget).hasClass('is-sorting')) {\n                $('.datatablex table a, .datatablex td').removeClass('is-sorting is-reversed');\n            }\n\n            $(event.currentTarget).addClass('is-sorting');\n            $('.datatablex td[data-tablex-key=\"' + key + '\"]').addClass('is-sorting');\n\n            $(event.currentTarget).toggleClass('is-reversed');\n        },\n\n\n        /**\r\n         * \r\n         */\n        resetSort: function resetSort() {\n            $('.datatablex table a, .datatablex td').removeClass('is-sorting is-reversed');\n            this.buildTableBody(this.options.data);\n        },\n\n\n        /**\r\n         * \r\n         */\n        destroy: function destroy() {\n            $('body').off('click.sort');\n            $('.datatablex, .datatablex *').off('click');\n            $('.datatablex').empty();\n        }\n    };\n\n    /*------------------------------------*\\\r\n      EXPORT OPTIONS\r\n    \\*------------------------------------*/\n    module.exports = namespace['pluginName'];\n})(jQuery, window, document);\n\n},{}]},{},[1])(1)\n});\n"]}